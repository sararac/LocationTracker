package com.penguin.locationtracker

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import com.google.firebase.database.ChildEventListener
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import java.text.SimpleDateFormat
import java.util.*

class LocationNotificationManager(private val context: Context) {

    companion object {
        private const val TAG = "LocationNotification"
        private const val CHANNEL_ID = "location_tracking_notifications"
        private const val NOTIFICATION_GROUP = "location_tracking_group"
        private const val SUMMARY_NOTIFICATION_ID = 1000
    }

    private val database = Firebase.database
    private val locationsRef = database.getReference("locations")
    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
    private val userListeners = mutableMapOf<String, ChildEventListener>()

    init {
        createNotificationChannel()
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "ÏúÑÏπò Ï∂îÏ†Å ÏïåÎ¶º",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "ÏÇ¨Ïö©ÏûêÎì§Ïùò ÏúÑÏπò Î≥ÄÍ≤Ω Î∞è Î®∏Î¨∏ÏãúÍ∞Ñ ÏïåÎ¶º"
                enableVibration(true)
                enableLights(true)
                setShowBadge(true)
            }
            notificationManager.createNotificationChannel(channel)
            Log.d(TAG, "Location notification channel created")
        }
    }

    /**
     * ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏùò ÏúÑÏπò Ï∂îÏ†Å ÏïåÎ¶º ÏãúÏûë
     */
    fun startLocationNotifications(targetUserId: String) {
        if (userListeners.containsKey(targetUserId)) {
            Log.d(TAG, "Already listening for $targetUserId")
            return
        }

        val listener = object : ChildEventListener {
            private var lastLocationData: LocationData? = null

            override fun onChildAdded(snapshot: DataSnapshot, previousChildName: String?) {
                val locationData = snapshot.getValue(LocationData::class.java)
                if (locationData != null && locationData.userId == targetUserId) {
                    lastLocationData = locationData
                    showLocationNotification(locationData, isNewLocation = true)
                }
            }

            override fun onChildChanged(snapshot: DataSnapshot, previousChildName: String?) {
                val locationData = snapshot.getValue(LocationData::class.java)
                if (locationData != null && locationData.userId == targetUserId) {
                    // Î®∏Î¨∏ÏãúÍ∞ÑÏù¥ ÏóÖÎç∞Ïù¥Ìä∏Îêú Í≤ΩÏö∞ÏóêÎßå ÏïåÎ¶º (ÏÉà ÏúÑÏπòÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞)
                    lastLocationData?.let { last ->
                        if (isSameLocation(last, locationData) && locationData.stayDuration > 0) {
                            showLocationNotification(locationData, isNewLocation = false)
                        }
                    }
                    lastLocationData = locationData
                }
            }

            override fun onChildRemoved(snapshot: DataSnapshot) {
                // ÏúÑÏπò Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†úÏãú Ï≤òÎ¶¨ (ÌïÑÏöîÏãú)
            }

            override fun onChildMoved(snapshot: DataSnapshot, previousChildName: String?) {
                // Ïù¥ÎèôÏãú Ï≤òÎ¶¨ (ÏùºÎ∞òÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©ÏïàÌï®)
            }

            override fun onCancelled(error: DatabaseError) {
                Log.e(TAG, "Error listening to $targetUserId locations: ${error.message}")
            }
        }

        locationsRef.child(targetUserId).addChildEventListener(listener)
        userListeners[targetUserId] = listener

        Log.d(TAG, "Started location notifications for $targetUserId")
    }

    /**
     * ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏùò ÏúÑÏπò Ï∂îÏ†Å ÏïåÎ¶º Ï§ëÎã®
     */
    fun stopLocationNotifications(targetUserId: String) {
        userListeners[targetUserId]?.let { listener ->
            locationsRef.child(targetUserId).removeEventListener(listener)
            userListeners.remove(targetUserId)
            Log.d(TAG, "Stopped location notifications for $targetUserId")
        }
    }

    /**
     * Î™®Îì† ÏúÑÏπò Ï∂îÏ†Å ÏïåÎ¶º Ï§ëÎã®
     */
    fun stopAllNotifications() {
        userListeners.forEach { (userId, listener) ->
            locationsRef.child(userId).removeEventListener(listener)
        }
        userListeners.clear()
        Log.d(TAG, "Stopped all location notifications")
    }

    /**
     * Í∞ôÏùÄ ÏúÑÏπòÏù∏ÏßÄ ÌåêÎã® (Í±∞Î¶¨ Í∏∞Ï§Ä)
     */
    private fun isSameLocation(location1: LocationData, location2: LocationData): Boolean {
        val distance = calculateDistance(
            location1.latitude, location1.longitude,
            location2.latitude, location2.longitude
        )
        return distance <= 50.0 // 50ÎØ∏ÌÑ∞ Ïù¥ÎÇ¥Î©¥ Í∞ôÏùÄ ÏúÑÏπòÎ°ú ÌåêÎã®
    }

    /**
     * Îëê ÏúÑÏπòÍ∞Ñ Í±∞Î¶¨ Í≥ÑÏÇ∞
     */
    private fun calculateDistance(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double {
        val earthRadius = 6371000.0 // ÏßÄÍµ¨ Î∞òÏßÄÎ¶Ñ (ÎØ∏ÌÑ∞)
        val dLat = Math.toRadians(lat2 - lat1)
        val dLon = Math.toRadians(lon2 - lon1)
        val a = kotlin.math.sin(dLat / 2) * kotlin.math.sin(dLat / 2) +
                kotlin.math.cos(Math.toRadians(lat1)) * kotlin.math.cos(Math.toRadians(lat2)) *
                kotlin.math.sin(dLon / 2) * kotlin.math.sin(dLon / 2)
        val c = 2 * kotlin.math.atan2(kotlin.math.sqrt(a), kotlin.math.sqrt(1 - a))
        return earthRadius * c
    }

    /**
     * ÏúÑÏπò ÏïåÎ¶º ÌëúÏãú
     */
    private fun showLocationNotification(locationData: LocationData, isNewLocation: Boolean) {
        try {
            val currentTime = SimpleDateFormat("HHÏãúmmÎ∂Ñ", Locale.KOREAN).format(Date())

            val (title, content) = if (isNewLocation) {
                // ÏÉàÎ°úÏö¥ ÏúÑÏπò Ïù¥Îèô ÏïåÎ¶º
                val title = "üìç ${locationData.userId} ÏúÑÏπò Ïù¥Îèô"
                val content = "${locationData.userId}Ïù¥(Í∞Ä) ${currentTime}Ïóê ÏÉàÎ°úÏö¥ ÏúÑÏπòÎ°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§"
                Pair(title, content)
            } else {
                // Î®∏Î¨∏ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º
                val stayDurationText = locationData.getFormattedStayDuration()
                val title = "‚è±Ô∏è ${locationData.userId} Î®∏Î¨∏ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏"
                val content = "${locationData.userId}Ïù¥(Í∞Ä) ÌòÑÏû¨ ÏúÑÏπòÏóê ${stayDurationText} Î®∏Î¨ºÍ≥† ÏûàÏäµÎãàÎã§"
                Pair(title, content)
            }

            // ÏïåÎ¶º ÌÅ¥Î¶≠Ïãú Ìï¥Îãπ ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉùÌïòÏó¨ Ïï± Ïã§Ìñâ
            val intent = Intent(context, MainActivity::class.java).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
                putExtra("selected_user_id", locationData.userId)
                putExtra("notification_type", "location_tracking")
            }

            val pendingIntent = PendingIntent.getActivity(
                context,
                locationData.userId.hashCode(),
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            val notification = NotificationCompat.Builder(context, CHANNEL_ID)
                .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                .setContentTitle(title)
                .setContentText(content)
                .setStyle(NotificationCompat.BigTextStyle().bigText(content))
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setDefaults(NotificationCompat.DEFAULT_ALL)
                .setAutoCancel(true)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .setContentIntent(pendingIntent)
                .setGroup(NOTIFICATION_GROUP)
                .build()

            // ÏÇ¨Ïö©ÏûêÎ≥ÑÎ°ú Í≥†Ïú†Ìïú ÏïåÎ¶º ID ÏÉùÏÑ±
            val notificationId = locationData.userId.hashCode() + if (isNewLocation) 0 else 1
            notificationManager.notify(notificationId, notification)

            Log.d(TAG, "Location notification shown for ${locationData.userId}: $title")

            // Í∑∏Î£π ÏöîÏïΩ ÏïåÎ¶º ÌëúÏãú (Ïó¨Îü¨ ÏïåÎ¶ºÏù¥ ÏûàÏùÑ Îïå)
            showSummaryNotification()

        } catch (e: Exception) {
            Log.e(TAG, "Error showing location notification", e)
        }
    }

    /**
     * Í∑∏Î£π ÏöîÏïΩ ÏïåÎ¶º ÌëúÏãú
     */
    private fun showSummaryNotification() {
        try {
            val summaryNotification = NotificationCompat.Builder(context, CHANNEL_ID)
                .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                .setContentTitle("ÏúÑÏπò Ï∂îÏ†Å ÏïåÎ¶º")
                .setContentText("ÏÇ¨Ïö©ÏûêÎì§Ïùò ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏûàÏäµÎãàÎã§")
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setGroup(NOTIFICATION_GROUP)
                .setGroupSummary(true)
                .setAutoCancel(true)
                .build()

            notificationManager.notify(SUMMARY_NOTIFICATION_ID, summaryNotification)

        } catch (e: Exception) {
            Log.e(TAG, "Error showing summary notification", e)
        }
    }

    /**
     * ÌòÑÏû¨ Ï∂îÏ†ÅÏ§ëÏù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ù Î∞òÌôò
     */
    fun getTrackedUsers(): Set<String> {
        return userListeners.keys.toSet()
    }
}